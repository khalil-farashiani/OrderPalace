// Code generated by MockGen. DO NOT EDIT.
// Source: internal/contract/broker_intractor.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBrokerIntractor is a mock of BrokerIntractor interface.
type MockBrokerIntractor struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerIntractorMockRecorder
}

// MockBrokerIntractorMockRecorder is the mock recorder for MockBrokerIntractor.
type MockBrokerIntractorMockRecorder struct {
	mock *MockBrokerIntractor
}

// NewMockBrokerIntractor creates a new mock instance.
func NewMockBrokerIntractor(ctrl *gomock.Controller) *MockBrokerIntractor {
	mock := &MockBrokerIntractor{ctrl: ctrl}
	mock.recorder = &MockBrokerIntractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerIntractor) EXPECT() *MockBrokerIntractorMockRecorder {
	return m.recorder
}

// ReceiveOrder mocks base method.
func (m *MockBrokerIntractor) ReceiveOrder(data chan []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveOrder", data)
}

// ReceiveOrder indicates an expected call of ReceiveOrder.
func (mr *MockBrokerIntractorMockRecorder) ReceiveOrder(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveOrder", reflect.TypeOf((*MockBrokerIntractor)(nil).ReceiveOrder), data)
}
